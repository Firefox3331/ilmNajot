{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst state = {\n  categories: [],\n  products: [],\n  orderProducts: [],\n  totalBalance: 0\n};\nconst slice = createSlice({\n  name: \"user\",\n  initialState: state,\n  reducers: {\n    getCategories(state, action) {},\n    getCategoriesSuccess(state, action) {\n      state.categories = action.payload;\n    },\n    getProducts(state, action) {},\n    getProductsSuccess(state, action) {\n      state.products = action.payload;\n    },\n    setOrderProduct(state, action) {\n      let a = state.orderProducts.filter(order => order.id == action.payload.id);\n      if (a.length === 0) {\n        state.orderProducts.push({\n          ...action.payload,\n          count: 1\n        });\n      }\n      state.totalBalance = state.orderProducts.reduce((accumulator, currentValue) => accumulator + currentValue.count * currentValue.amount, 0);\n    },\n    changeOrderproduct(state, action) {\n      if (action.payload.status === \"plus\") {\n        state.orderProducts[action.payload.index].count++;\n      } else if (action.payload.status === \"minus\") {\n        state.orderProducts[action.payload.index].count--;\n      }\n      state.totalBalance = state.orderProducts.reduce((accumulator, currentValue) => accumulator + currentValue.count * currentValue.amount, 0);\n    },\n    deleteOrder(state, action) {\n      state.orderProducts.splice(action.payload, 1);\n      state.totalBalance = state.orderProducts.reduce((accumulator, currentValue) => accumulator + currentValue.count * currentValue.amount, 0);\n    },\n    postOrderProduct(state, action) {}\n  }\n});\nexport const {\n  getCategories,\n  getCategoriesSuccess,\n  getProducts,\n  getProductsSuccess,\n  changeOrderproduct,\n  setOrderProduct,\n  deleteOrder\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","state","categories","products","orderProducts","totalBalance","slice","name","initialState","reducers","getCategories","action","getCategoriesSuccess","payload","getProducts","getProductsSuccess","setOrderProduct","a","filter","order","id","length","push","count","reduce","accumulator","currentValue","amount","changeOrderproduct","status","index","deleteOrder","splice","postOrderProduct","actions","reducer"],"sources":["D:/lessonreact/src/store/slice/userReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst state = {\r\n    categories: [],\r\n    products: [],\r\n    orderProducts: [],\r\n    totalBalance: 0\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"user\",\r\n    initialState: state,\r\n    reducers: {\r\n        getCategories(state, action) { },\r\n        getCategoriesSuccess(state, action) {\r\n            state.categories = action.payload;\r\n        },\r\n        getProducts(state, action) { },\r\n        getProductsSuccess(state, action) {\r\n            state.products = action.payload;\r\n        },\r\n        setOrderProduct(state, action) {\r\n            let a = state.orderProducts.filter(order => order.id == action.payload.id);\r\n            if (a.length === 0) {\r\n                state.orderProducts.push({ ...action.payload, count: 1 });\r\n            }\r\n            state.totalBalance = state.orderProducts.reduce((accumulator, currentValue) => accumulator + (currentValue.count * currentValue.amount), 0);\r\n        },\r\n        changeOrderproduct(state, action){\r\n            if(action.payload.status === \"plus\"){\r\n                state.orderProducts[action.payload.index].count ++;\r\n            }else if(action.payload.status === \"minus\"){\r\n                state.orderProducts[action.payload.index].count --;\r\n            }\r\n            state.totalBalance = state.orderProducts.reduce((accumulator, currentValue) => accumulator + (currentValue.count * currentValue.amount), 0);\r\n        },\r\n        deleteOrder(state,action){\r\n            state.orderProducts.splice(action.payload, 1);\r\n            state.totalBalance = state.orderProducts.reduce((accumulator, currentValue) => accumulator + (currentValue.count * currentValue.amount), 0);\r\n        },\r\n        postOrderProduct(state,action){\r\n            \r\n        }\r\n    }\r\n})\r\n\r\nexport const { getCategories, getCategoriesSuccess, getProducts, getProductsSuccess, changeOrderproduct, setOrderProduct, deleteOrder } = slice.actions\r\nexport default slice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,KAAK,GAAG;EACVC,UAAU,EAAE,EAAE;EACdC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAE,EAAE;EACjBC,YAAY,EAAE;AAClB,CAAC;AAED,MAAMC,KAAK,GAAGN,WAAW,CAAC;EACtBO,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEP,KAAK;EACnBQ,QAAQ,EAAE;IACNC,aAAaA,CAACT,KAAK,EAAEU,MAAM,EAAE,CAAE,CAAC;IAChCC,oBAAoBA,CAACX,KAAK,EAAEU,MAAM,EAAE;MAChCV,KAAK,CAACC,UAAU,GAAGS,MAAM,CAACE,OAAO;IACrC,CAAC;IACDC,WAAWA,CAACb,KAAK,EAAEU,MAAM,EAAE,CAAE,CAAC;IAC9BI,kBAAkBA,CAACd,KAAK,EAAEU,MAAM,EAAE;MAC9BV,KAAK,CAACE,QAAQ,GAAGQ,MAAM,CAACE,OAAO;IACnC,CAAC;IACDG,eAAeA,CAACf,KAAK,EAAEU,MAAM,EAAE;MAC3B,IAAIM,CAAC,GAAGhB,KAAK,CAACG,aAAa,CAACc,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,IAAIT,MAAM,CAACE,OAAO,CAACO,EAAE,CAAC;MAC1E,IAAIH,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;QAChBpB,KAAK,CAACG,aAAa,CAACkB,IAAI,CAAC;UAAE,GAAGX,MAAM,CAACE,OAAO;UAAEU,KAAK,EAAE;QAAE,CAAC,CAAC;MAC7D;MACAtB,KAAK,CAACI,YAAY,GAAGJ,KAAK,CAACG,aAAa,CAACoB,MAAM,CAAC,CAACC,WAAW,EAAEC,YAAY,KAAKD,WAAW,GAAIC,YAAY,CAACH,KAAK,GAAGG,YAAY,CAACC,MAAO,EAAE,CAAC,CAAC;IAC/I,CAAC;IACDC,kBAAkBA,CAAC3B,KAAK,EAAEU,MAAM,EAAC;MAC7B,IAAGA,MAAM,CAACE,OAAO,CAACgB,MAAM,KAAK,MAAM,EAAC;QAChC5B,KAAK,CAACG,aAAa,CAACO,MAAM,CAACE,OAAO,CAACiB,KAAK,CAAC,CAACP,KAAK,EAAG;MACtD,CAAC,MAAK,IAAGZ,MAAM,CAACE,OAAO,CAACgB,MAAM,KAAK,OAAO,EAAC;QACvC5B,KAAK,CAACG,aAAa,CAACO,MAAM,CAACE,OAAO,CAACiB,KAAK,CAAC,CAACP,KAAK,EAAG;MACtD;MACAtB,KAAK,CAACI,YAAY,GAAGJ,KAAK,CAACG,aAAa,CAACoB,MAAM,CAAC,CAACC,WAAW,EAAEC,YAAY,KAAKD,WAAW,GAAIC,YAAY,CAACH,KAAK,GAAGG,YAAY,CAACC,MAAO,EAAE,CAAC,CAAC;IAC/I,CAAC;IACDI,WAAWA,CAAC9B,KAAK,EAACU,MAAM,EAAC;MACrBV,KAAK,CAACG,aAAa,CAAC4B,MAAM,CAACrB,MAAM,CAACE,OAAO,EAAE,CAAC,CAAC;MAC7CZ,KAAK,CAACI,YAAY,GAAGJ,KAAK,CAACG,aAAa,CAACoB,MAAM,CAAC,CAACC,WAAW,EAAEC,YAAY,KAAKD,WAAW,GAAIC,YAAY,CAACH,KAAK,GAAGG,YAAY,CAACC,MAAO,EAAE,CAAC,CAAC;IAC/I,CAAC;IACDM,gBAAgBA,CAAChC,KAAK,EAACU,MAAM,EAAC,CAE9B;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAED,aAAa;EAAEE,oBAAoB;EAAEE,WAAW;EAAEC,kBAAkB;EAAEa,kBAAkB;EAAEZ,eAAe;EAAEe;AAAY,CAAC,GAAGzB,KAAK,CAAC4B,OAAO;AACvJ,eAAe5B,KAAK,CAAC6B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}